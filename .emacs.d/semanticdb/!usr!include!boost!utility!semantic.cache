;; Object utility/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "utility/"
  :tables (list 
   (semanticdb-table "enable_if.hpp"
    :major-mode 'c++-mode
    :tags 
        '( ("BOOST_UTILITY_ENABLE_IF_HPP" variable (:constant-flag t) nil [486 513])
            ("boost/config.hpp" include nil nil [515 542])
            ("boost" type
               (:members 
                  ( ("enable_if_c" type
                       (:members 
                          ( ("type" type
                               (:typedef ("T" type (:type "class") nil nil)
                                :superclasses "T"
                                :type "typedef")
                                (reparse-symbol classsubparts) [792 807]))                          
                        :type "struct")
                        (reparse-symbol namespacesubparts) [767 812])
                    ("enable_if_c" type
                       (:template 
                          ( ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :template-specifier 
                          ( ("false" type nil nil nil)
                            ("T" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [816 869])
                    ("enable_if" type
                       (:superclasses 
                          ( ("enable_if_c" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          
                        :type "struct")
                        (reparse-symbol namespacesubparts) [914 971])
                    ("lazy_enable_if_c" type
                       (:template 
                          ( ("bool" type nil nil nil)
                            ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :members 
                          ( ("type" type
                               (:typedef ("T::type" type (:type "class") nil nil)
                                :superclasses "T::type"
                                :type "typedef")
                                (reparse-symbol classsubparts) [1034 1064]))                          )
                        (reparse-symbol namespacesubparts) [975 1069])
                    ("lazy_enable_if_c" type
                       (:template 
                          ( ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :template-specifier 
                          ( ("false" type nil nil nil)
                            ("T" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [1073 1131])
                    ("lazy_enable_if" type
                       (:template 
                          ( ("Cond" type (:type "class") nil nil)
                            ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :superclasses 
                          ( ("lazy_enable_if_c" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          )
                        (reparse-symbol namespacesubparts) [1135 1236])
                    ("disable_if_c" type
                       (:members 
                          ( ("type" type
                               (:typedef ("T" type (:type "class") nil nil)
                                :superclasses "T"
                                :type "typedef")
                                (reparse-symbol classsubparts) [1303 1318]))                          
                        :type "struct")
                        (reparse-symbol namespacesubparts) [1277 1323])
                    ("disable_if_c" type
                       (:template 
                          ( ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :template-specifier 
                          ( ("true" type nil nil nil)
                            ("T" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [1327 1380])
                    ("disable_if" type
                       (:superclasses 
                          ( ("disable_if_c" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          
                        :type "struct")
                        (reparse-symbol namespacesubparts) [1425 1484])
                    ("lazy_disable_if_c" type
                       (:template 
                          ( ("bool" type nil nil nil)
                            ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :members 
                          ( ("type" type
                               (:typedef ("T::type" type (:type "class") nil nil)
                                :superclasses "T::type"
                                :type "typedef")
                                (reparse-symbol classsubparts) [1548 1578]))                          )
                        (reparse-symbol namespacesubparts) [1488 1583])
                    ("lazy_disable_if_c" type
                       (:template 
                          ( ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :template-specifier 
                          ( ("true" type nil nil nil)
                            ("T" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [1587 1645])
                    ("lazy_disable_if" type
                       (:template 
                          ( ("Cond" type (:type "class") nil nil)
                            ("T" type (:type "class") nil nil))                          
                        :type "struct"
                        :superclasses 
                          ( ("lazy_disable_if_c" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          )
                        (reparse-symbol namespacesubparts) [1649 1752]))                  
                :type "namespace")
                nil [709 1755]))          
    :file "enable_if.hpp"
    :pointmax 3103
    :fsize 3102
    :lastmodtime '(21413 1115 0 0)
    :unmatched-syntax '((punctuation 1420 . 1421) (VOID 1416 . 1420) (punctuation 1414 . 1415) (symbol 1412 . 1413) (CLASS 1406 . 1411) (punctuation 1404 . 1405) (symbol 1400 . 1404) (CLASS 1394 . 1399) (punctuation 1393 . 1394) (TEMPLATE 1384 . 1392) (punctuation 1273 . 1274) (VOID 1269 . 1273) (punctuation 1267 . 1268) (symbol 1265 . 1266) (CLASS 1259 . 1264) (punctuation 1257 . 1258) (symbol 1256 . 1257) (BOOL 1251 . 1255) (punctuation 1250 . 1251) (TEMPLATE 1241 . 1249) (punctuation 909 . 910) (VOID 905 . 909) (punctuation 903 . 904) (symbol 901 . 902) (CLASS 895 . 900) (punctuation 893 . 894) (symbol 889 . 893) (CLASS 883 . 888) (punctuation 882 . 883) (TEMPLATE 873 . 881) (punctuation 763 . 764) (VOID 759 . 763) (punctuation 757 . 758) (symbol 755 . 756) (CLASS 749 . 754) (punctuation 747 . 748) (symbol 746 . 747) (BOOL 741 . 745) (punctuation 740 . 741) (TEMPLATE 731 . 739))
    :lexical-table 
        '(("BOOST_UTILITY_ENABLE_IF_HPP")
          )

    )
   )
  :file "!usr!include!boost!utility!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
